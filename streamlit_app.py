import streamlit as st
import os
import json
import zipfile
import io
import uuid
import re
from datetime import datetime
from typing import List, Dict
from openai import OpenAI
from PIL import Image, ImageDraw, ImageFont

DEFAULT_SYSTEM_PROMPT = """üß† –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ò-SMM-–ê–ì–ï–ù–¢–ê

–¶–µ–ª—å: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ Threads –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¢–∏–ø—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –ª—é–±—É—é –ø—Ä–æ–±–ª–µ–º—É" –≤ –≤–∏–¥–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON.

üìÑ –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ - —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "id": "<—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä>",
  "theme": "<–∫–æ—Ä–æ—Ç–∫–∞—è —Ç–µ–º–∞ / –ø—Ä–æ–±–ª–µ–º–∞>",
  "replies": [
    {
      "role": "<—Ä–æ–ª—å –∏–ª–∏ —Ç–∏–ø –≥–æ–≤–æ—Ä—è—â–µ–≥–æ>",
      "text": "<—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–ø–ª–∏–∫–∏>"
    }
  ],
  "cta": "<–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é>",
  "tags": ["#—Ç–µ–≥1", "#—Ç–µ–≥2", "#—Ç–µ–≥3"],
  "language": "ru"
}

‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
* –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ
* replies —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç 6 –¥–æ 8 —Ä–µ–ø–ª–∏–∫
* –ü–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞ ‚Äî —Ç–µ–º–∞/–ø—Ä–æ–±–ª–µ–º–∞ ("–Ø" –∏–ª–∏ "–ö–ª–∏–µ–Ω—Ç")
* –ü–æ—Å–ª–µ–¥–Ω—è—è ‚Äî –ø–∞–Ω—á–ª–∞–π–Ω ("–§–ò–ù–ê–õ" –∏–ª–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–µ—Ä—Å–æ–Ω–∞–∂/—ç–∫—Å–ø–µ—Ä—Ç)
* –í—Å–µ —Ä–æ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
* theme ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è (1‚Äì4 —Å–ª–æ–≤–∞)
* language –≤—Å–µ–≥–¥–∞ "ru"

üé≠ –°—Ç–∏–ª—å –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
* –¢–æ–Ω: —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π
* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –º–µ–Ω—å—à–µ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –∏—Ä–æ–Ω–∏–∏, —Å–∞—Ç–∏—Ä—ã, –±—ã—Ç–æ–≤–æ–≥–æ –∞–±—Å—É—Ä–¥–∞
* –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–ø–ª–∏–∫–∞ ‚Äî –ø–∞–Ω—á–ª–∞–π–Ω: –∫–æ—Ä–æ—Ç–∫–∞—è, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è

–¢–∏–ø—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:
–í—ã–±–∏—Ä–∞–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤/–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –∂–∏–∑–Ω–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã—Ö ‚Äú—ç–∫—Å–ø–µ—Ä—Ç–æ–≤‚Äù –≤ –∫–∞–∂–¥–æ–π —Ä–µ–ø–ª–∏–∫–µ.
–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–±—Å—É—Ä–¥–Ω—ã–µ (‚Äú–î–£–• {...}‚Äù, ‚ÄúWi-Fi‚Äù, ‚Äú–ì–û–°–£–°–õ–£–ì–ò‚Äù, ‚Äú–°–û–°–ï–î‚Äù).

‚úçÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:
* –∂–∏—Ä–Ω—ã–π –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
* *–∫—É—Ä—Å–∏–≤* –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
* –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML

üî• –ü—Ä–∞–≤–∏–ª–∞ –ø–∞–Ω—á–ª–∞–π–Ω–∞:
* –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–ø–ª–∏–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è (1-3 —Å—Ç—Ä–æ–∫–∏)
* –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–ø—Å–æ–º
* –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ

üì¢ CTA (–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω):
* "–£–∫–∞–∂–∏ —Å–µ–±—èüëá"

üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: 3‚Äì5 —à—Ç—É–∫ (#–∏—Ä–æ–Ω–∏—è, #threads—é–º–æ—Ä, #–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, #–º–µ–º—ã, #–∫–æ—É—á–∏–Ω–≥)

üö´ –ë–µ–∑ –Ω–∞—Å–∏–ª–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏, –ø–æ–ª–∏—Ç–∏–∫–∏, –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

# ============================================       
# –ö–õ–ê–°–°–´ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò
# ============================================

class ThreadsCardGenerator:
    """–ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ Threads"""
    
    def __init__(self, api_key: str, system_prompt: str | None = None):
        self.client = OpenAI(api_key=api_key)
        prompt = system_prompt or self._load_system_prompt()
        self.system_prompt = prompt.strip() if isinstance(prompt, str) else DEFAULT_SYSTEM_PROMPT
        
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò"""
        return DEFAULT_SYSTEM_PROMPT

    def generate_thread_content(self, topic: str = None) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ OpenAI API
        
        Args:
            topic: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            Dict —Å —Ç–µ–º–æ–π –∏ —Ä–µ–ø–ª–∏–∫–∞–º–∏
        """
        user_message = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
        if topic:
            user_message += f" {topic}"
            
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": user_message}
                ],
                temperature=0.9,
                response_format={"type": "json_object"}
            )
            
            content = json.loads(response.choices[0].message.content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if "id" not in content:
                content["id"] = f"post_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{uuid.uuid4().hex[:6]}"
                
            return content
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")


class ImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, width: int = 1080, height: int = 1080):
        self.width = width
        self.height = height
        self.colors = {
            'background': '#1a1a2e',
            'role': '#e94560',
            'text': '#ffffff',
            'accent': '#0f3460'
        }
        
    def _get_font(self, size: int, bold: bool = False):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—Ä–∏—Ñ—Ç DejaVu Sans (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ª–∞—Ç–∏–Ω–∏—Ü—É)"""
        font_name = "DejaVuSans-Bold.ttf" if bold else "DejaVuSans.ttf"
        try:
            return ImageFont.truetype(font_name, size)
        except OSError:
            return ImageFont.load_default()

    def _format_sentences(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"""
        text = re.sub(r'\s+([,.;!?])', r'\1', text)
        text = re.sub(r'\s{2,}', ' ', text)
        text = re.sub(r'([.!?])\s+(?=[^\s])', r'\1\n', text)
        return text.strip()
    
    def _parse_markdown(self, text: str) -> List[tuple]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä markdown –¥–ª—è **–∂–∏—Ä–Ω–æ–≥–æ** –∏ *–∫—É—Ä—Å–∏–≤–∞*
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç, —Å—Ç–∏–ª—å)
        """
        result = []
        i = 0
        current_text = ""
        
        while i < len(text):
            if i < len(text) - 1 and text[i:i+2] == '**':
                if current_text:
                    result.append((current_text, 'normal'))
                    current_text = ""
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ **
                end = text.find('**', i + 2)
                if end != -1:
                    content = text[i+2:end]
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                    content = re.sub(r'\s+([,.;!?])', r'\1', content)
                    result.append((content, 'bold'))
                    i = end + 2
                else:
                    current_text += text[i]
                    i += 1
            elif text[i] == '*':
                if current_text:
                    result.append((current_text, 'normal'))
                    current_text = ""
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π *
                end = text.find('*', i + 1)
                if end != -1:
                    content = text[i+1:end]
                    content = re.sub(r'\s+([,.;!?])', r'\1', content)
                    result.append((content, 'italic'))
                    i = end + 1
                else:
                    current_text += text[i]
                    i += 1
            else:
                current_text += text[i]
                i += 1
        
        if current_text:
            clean_text = re.sub(r'\s+([,.;!?])', r'\1', current_text)
            result.append((clean_text, 'normal'))
            
        return result if result else [(re.sub(r'\s+([,.;!?])', r'\1', text), 'normal')]
    
    def _should_keep_with_next(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ –≤–º–µ—Å—Ç–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º"""
        short_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–∑–∞', '–∏–∑', '–æ', '—É', '–∫', '–¥–æ', '–æ—Ç', '–Ω–µ'}
        return word.lower() in short_words or len(word) <= 2
    
    def _ends_with_punctuation(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"""
        return word and word[-1] in '.,!?;:‚Äî-'
    
    def _split_word_and_punctuation(self, word: str) -> tuple:
        """–û—Ç–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –æ—Ç —Å–ª–æ–≤–∞"""
        if not word:
            return '', ''
        
        punctuation = ''
        text = word
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è —Å –∫–æ–Ω—Ü–∞
        while text and text[-1] in '.,!?;:‚Äî-':
            punctuation = text[-1] + punctuation
            text = text[:-1]
        
        return text, punctuation
    
    def create_card(self, role: str, text: str, card_number: int, total_cards: int) -> Image.Image:
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–ø–ª–∏–∫–æ–π"""
        img = Image.new('RGB', (self.width, self.height), self.colors['background'])
        draw = ImageDraw.Draw(img)
        
        # –®—Ä–∏—Ñ—Ç—ã
        role_font = self._get_font(60, bold=True)
        text_font = self._get_font(45)
        text_font_bold = self._get_font(45, bold=True)
        counter_font = self._get_font(30)
        
        padding = 160
        y_position = padding
        
        # –†–∏—Å—É–µ–º —Ä–æ–ª—å
        role_bbox = draw.textbbox((0, 0), role, font=role_font)
        role_width = role_bbox[2] - role_bbox[0]
        role_x = (self.width - role_width) // 2
        
        draw.text((role_x, y_position), role, fill=self.colors['role'], font=role_font)
        y_position += (role_bbox[3] - role_bbox[1]) + 60
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        line_margin = 200
        draw.line([(line_margin, y_position), (self.width - line_margin, y_position)], 
                  fill=self.colors['accent'], width=3)
        y_position += 120
        
        # –ü–∞—Ä—Å–∏–º –∏ —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        text = self._format_sentences(text)
        parsed_text = self._parse_markdown(text)
        max_width = self.width - (padding * 2)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –∏—Ö —Å—Ç–∏–ª—è–º–∏
        word_segments = []
        for segment, style in parsed_text:
            parts = segment.split('\n')
            for part_index, part in enumerate(parts):
                if part.strip():
                    words = part.split()
                    for word in words:
                        word_text, punctuation = self._split_word_and_punctuation(word)
                        if word_text:
                            word_segments.append((word_text, style, punctuation))
                        elif punctuation:
                            word_segments.append(('', style, punctuation))
                if part_index < len(parts) - 1:
                    word_segments.append((None, 'newline', ''))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª
        lines = []
        current_line = []
        i = 0
        
        while i < len(word_segments):
            word_text, style, punctuation = word_segments[i]

            if style == 'newline':
                if current_line:
                    lines.append(current_line)
                    current_line = []
                i += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            full_word = word_text + punctuation
            test_line = current_line + [(full_word, style)]
            test_text = ' '.join([w for w, _ in test_line])
            
            test_font = text_font_bold if style == 'bold' else text_font
            bbox = draw.textbbox((0, 0), test_text, font=test_font)
            line_width = bbox[2] - bbox[0]
            
            if line_width <= max_width:
                current_line.append((full_word, style))
                i += 1
            else:
                if current_line:
                    last_word = current_line[-1][0]
                    
                    if self._should_keep_with_next(last_word.rstrip('.,!?;:‚Äî-')):
                        if len(current_line) > 1:
                            lines.append(current_line[:-1])
                            current_line = [current_line[-1], (full_word, style)]
                            i += 1
                        else:
                            lines.append(current_line)
                            current_line = [(full_word, style)]
                            i += 1
                    else:
                        lines.append(current_line)
                        current_line = [(full_word, style)]
                        i += 1
                else:
                    current_line = [(full_word, style)]
                    i += 1
        
        if current_line:
            lines.append(current_line)

        punctuation_regex = re.compile(r'\s+([,.;!?])')
        cleaned_lines = []
        for line in lines:
            cleaned_line = []
            for word, style in line:
                cleaned_word = punctuation_regex.sub(r'\1', word)
                cleaned_line.append((cleaned_word, style))
            cleaned_lines.append(cleaned_line)
        lines = cleaned_lines

        # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
        for line_segments in lines:
            line_text = ' '.join([word for word, _ in line_segments])
            bbox = draw.textbbox((0, 0), line_text, font=text_font)
            line_width = bbox[2] - bbox[0]
            x = (self.width - line_width) // 2
            for idx, (word, style) in enumerate(line_segments):
                current_font = text_font_bold if style == 'bold' else text_font
                draw.text((x, y_position), word, fill=self.colors['text'], font=current_font)
                word_bbox = draw.textbbox((0, 0), word, font=current_font)
                word_width = word_bbox[2] - word_bbox[0]
                x += word_width
                if idx < len(line_segments) - 1:
                    next_word = line_segments[idx + 1][0]
                    if not (style in ('bold', 'italic') and next_word in {'.', ',', '!', ':', ';'}):
                        space_bbox = draw.textbbox((0, 0), ' ', font=current_font)
                        x += space_bbox[2] - space_bbox[0]
            
            bbox = draw.textbbox((0, 0), 'Ay', font=text_font)
            y_position += (bbox[3] - bbox[1]) + 20
        
        # –°—á–µ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤–Ω–∏–∑—É
        counter_text = f"{card_number}/{total_cards}"
        counter_bbox = draw.textbbox((0, 0), counter_text, font=counter_font)
        counter_x = (self.width - (counter_bbox[2] - counter_bbox[0])) // 2
        counter_y = self.height - padding
        
        draw.text((counter_x, counter_y), counter_text, 
                  fill=self.colors['accent'], font=counter_font)
        
        return img


# ============================================       
# STREAMLIT-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ============================================


def _init_session_vars() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ session_state"""
    defaults = {
        "api_key": os.getenv("OPENAI_API_KEY", ""),
        "random_topics_history": [],
        "generated_batches": [],
        "is_generating": False,
        "batch_indices": {},
        "system_prompt": DEFAULT_SYSTEM_PROMPT,
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            st.session_state[key] = value[:] if isinstance(value, list) else value


def _sanitize_filename(value: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã"""
    safe_chars = "_- "
    cleaned = "".join(ch if ch.isalnum() or ch in safe_chars else "_" for ch in value)
    collapsed = "_".join(filter(None, cleaned.split()))
    return collapsed[:80] or "thread"


def _build_random_topic_request(history: List[str]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã"""
    if not history:
        return "–õ—é–±–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —É–¥–∏–≤–∏—Ç"
    history_text = ", ".join(history)
    return f"–õ—é–±–∞—è, –∫—Ä–æ–º–µ {history_text}"


def _images_to_zip(images: List[Dict], theme: str) -> io.BytesIO:
    """–£–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ ZIP"""
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
        for idx, image_info in enumerate(images, start=1):
            filename = f"{_sanitize_filename(theme)}_{idx:02d}_{image_info['role']}.png"
            zip_file.writestr(filename, image_info["bytes"])
    zip_buffer.seek(0)
    return zip_buffer


def _shift_batch_index(batch_id: str, delta: int, total: int) -> None:
    """–°–º–µ—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏"""
    indices = st.session_state["batch_indices"]
    current = indices.get(batch_id, 0)
    new_idx = max(0, min(total - 1, current + delta))
    indices[batch_id] = new_idx


def _render_image_viewer(batch_id: str, theme: str, images: List[Dict]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥"""
    indices = st.session_state["batch_indices"]
    total = len(images)
    if total == 0:
        st.warning("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    if batch_id not in indices or indices[batch_id] >= total:
        indices[batch_id] = 0

    current_idx = indices[batch_id]
    outer_left, center_col, outer_right = st.columns([1, 3, 1])

    with center_col:
        st.markdown(f"**–¢–µ–º–∞:** {theme}")
        button_col, image_col, button_col_right = st.columns([1, 8, 1], gap="small")

        with button_col:
            st.button(
                "‚óÄ",
                key=f"prev_{batch_id}",
                disabled=current_idx <= 0,
                use_container_width=True,
                on_click=_shift_batch_index,
                args=(batch_id, -1, total),
            )

        with button_col_right:
            st.button(
                "‚ñ∂",
                key=f"next_{batch_id}",
                disabled=current_idx >= total - 1,
                use_container_width=True,
                on_click=_shift_batch_index,
                args=(batch_id, 1, total),
            )

    current_idx = indices[batch_id]
    current_image = images[current_idx]

    with image_col:
        caption = f"{current_idx + 1}/{total} ¬∑ {current_image['role']}"
        display_width = max(1, current_image.get("width", 1080) // 2)
        st.image(current_image["bytes"], caption=caption, width=display_width)


def main() -> None:
    st.set_page_config(page_title="Threads Card Generator", layout="wide")
    _init_session_vars()

    st.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ Threads")
    st.caption("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏—Ä—É—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –∏ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ —Ü–µ–ª—É—é –ø–æ–¥–±–æ—Ä–∫—É –æ–¥–Ω–∏–º –∞—Ä—Ö–∏–≤–æ–º.")
    with st.expander("–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", expanded=False):
        st.text_area(
            "–ü—Ä–æ–º–ø—Ç",
            st.session_state.get("system_prompt", DEFAULT_SYSTEM_PROMPT),
            height=420,
            disabled=True,
        )

    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        api_key_input = st.text_input(
            "OpenAI API Key",
            value=st.session_state.get("api_key", ""),
            type="password",
            help="–ö–ª—é—á –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        )
        if api_key_input != st.session_state.get("api_key"):
            st.session_state["api_key"] = api_key_input.strip()

        prompt_input = st.text_area(
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            value=st.session_state.get("system_prompt", DEFAULT_SYSTEM_PROMPT),
            height=420,
            help="–≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –º–æ–¥–µ–ª–∏. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.",
            key="prompt_editor",
        )
        apply_col, hint_col = st.columns([1, 1])
        with apply_col:
            apply_prompt = st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="secondary")
        with hint_col:
            st.caption("–Ω–∞–∂–∞—Ç—å 2 —Ä–∞–∑–∞")

        if apply_prompt:
            st.session_state["system_prompt"] = prompt_input or DEFAULT_SYSTEM_PROMPT
            st.success("–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")

        st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º")
        history = st.session_state.get("random_topics_history", [])
        if history:
            st.markdown("\n".join(f"- {topic}" for topic in history))
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É.")

        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º", type="secondary"):
            st.session_state["random_topics_history"] = []
            st.success("–ò—Å—Ç–æ—Ä–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –æ—á–∏—â–µ–Ω–∞.")

    user_topic = st.text_input(
        "–¢–µ–º–∞ –ø–æ—Å—Ç–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
    ).strip()

    generate_disabled = st.session_state["is_generating"]
    generate_button = st.button(
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏",
        type="primary",
        disabled=generate_disabled,
    )

    if generate_button and not st.session_state["is_generating"]:
        if not st.session_state["api_key"]:
            st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        else:
            st.session_state["is_generating"] = True
            with st.spinner("–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."):
                try:
                    topic_used = user_topic
                    used_random_topic = False

                    if not topic_used:
                        topic_used = _build_random_topic_request(st.session_state["random_topics_history"])
                        used_random_topic = True

                    content_generator = ThreadsCardGenerator(
                        api_key=st.session_state["api_key"],
                        system_prompt=st.session_state.get("system_prompt"),
                    )
                    thread_content = content_generator.generate_thread_content(topic_used)

                    replies = thread_content.get("replies", [])
                    if not replies:
                        raise ValueError("–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                    image_generator = ImageGenerator()
                    total_cards = len(replies)
                    generated_images = []

                    for idx, reply in enumerate(replies, start=1):
                        role = reply.get("role", f"–†–µ–ø–ª–∏–∫–∞ {idx}")
                        text = reply.get("text", "")
                        card_img = image_generator.create_card(role, text, idx, total_cards)
                        buffer = io.BytesIO()
                        card_img.save(buffer, format="PNG")
                        generated_images.append(
                            {
                                "role": role,
                                "text": text,
                                "bytes": buffer.getvalue(),
                                "width": card_img.width,
                                "height": card_img.height,
                            }
                        )

                    theme = thread_content.get("theme", topic_used)
                    batch_id = thread_content.get("id") or f"thread_{uuid.uuid4().hex[:8]}"
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                    batch_payload = {
                        "id": batch_id,
                        "theme": theme,
                        "topic_used": topic_used,
                        "replies": replies,
                        "images": generated_images,
                        "cta": thread_content.get("cta"),
                        "tags": thread_content.get("tags", []),
                        "timestamp": timestamp,
                    }

                    st.session_state["generated_batches"] = [batch_payload]
                    st.session_state["batch_indices"] = {batch_id: 0}

                    if used_random_topic and theme not in st.session_state["random_topics_history"]:
                        st.session_state["random_topics_history"].append(theme)

                except Exception as error:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {error}")
                finally:
                    st.session_state["is_generating"] = False

    if st.session_state["generated_batches"]:
        st.divider()
        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏")

        for batch in reversed(st.session_state["generated_batches"]):
            container = st.container()
            with container:
                meta_text = (
                    f"ID: `{batch['id']}` ¬∑ –°–æ–∑–¥–∞–Ω–æ: {batch['timestamp']} ¬∑ "
                    f"CTA: {batch.get('cta', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}"
                )
                st.caption(meta_text)

                if batch.get("tags"):
                    st.caption("–¢–µ–≥–∏: " + " ".join(batch["tags"]))

                _render_image_viewer(batch["id"], batch["theme"], batch["images"])

                zip_file = _images_to_zip(batch["images"], batch["theme"])
                download_label = f"–°–∫–∞—á–∞—Ç—å ZIP –¥–ª—è —Ç–µ–º—ã ¬´{batch['theme']}¬ª"
                st.download_button(
                    download_label,
                    data=zip_file,
                    file_name=f"{_sanitize_filename(batch['theme'])}.zip",
                    mime="application/zip",
                    key=f"download_{batch['id']}",
                )
                st.write("---")
    else:
        st.info("–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")


if __name__ == "__main__":
    main()
